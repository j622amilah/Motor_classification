tilda		~
underscore	_	
caret		^
=
{}
``
"
'
@
()
[]
%
*
:
;
!
backslash	\
&
|
+
forwardslash	/
?
#
.
~=
.*
^_^

≈
≃
\n
$
£
^2
Θ 
θ








https://www.python-course.eu/python3_decorators.php
https://www.dsprelated.com/freebooks/filters/Butterworth_Lowpass_Filter_Example.html


https://www.thingiverse.com/thing:4421749

https://www.stlfinder.com/model/soap-dish-minimal-wire-XYhnynDV/2150458/

https://www.stlfinder.com/model/5-fingered-soap-dish-WhEV2JuB/3690/

https://www.stlfinder.com/model/shower-soap-dish-Ds5OI7Io/3461703/

https://eli.thegreenplace.net/2016/the-softmax-function-and-its-derivative/

https://stats.stackexchange.com/questions/65692/how-to-visualize-what-canonical-correlation-analysis-does-in-comparison-to-what

Learning about 'The Functional API':
https://www.tensorflow.org/guide/keras/functional
---------------------------------
Python function list : 
---------------------------------


...............
vector indexing :
...............
The internet says 'a[0] ... a[n] is equivalent to a[-n-1]...a[-1]' but negative indexing does not work in python.  To output the array a inverted, type 'a[-1]'. 
So to index the array a use the notation a[start_index:end_index]
a[0:n] == a[:n]
a[n:] == a[n:len(a)]
a == a[:]
a[::-1]   - inverts the vector

...............
General math :
...............

x**2  OR pow(x,2)     - x^2
# c = a*b       # element-wise multiplication - gives error

# c = a @ b  # normal matrix multiplication - gives a [4,2]

# 

print ("test: " + test)


...............
Numpy :
...............
a = np.ones((4,3))
a.shape = (4, 3)

a = np.random.randn(4, 3)
a.shape = (4, 3)

b = np.array([[1,1], [2,2], [3,3]])
b.shape = (3, 2)

b = np.random.randn(3, 2)
b.shape = (3, 2)
b.shape[0]
b.shape[1]

np.exp(x)
np.sum(x, axis=1, keepdims=True)


// OR / (called python slash operator) - this divides the numbers and floors the result
np.divide(x1, x2) OR np.true_divide(x1, x2)  - this is true division of element-wise entries


1-norm:
np.sqrt(np.sum(x))
OR
np.linalg.norm(x, ord=None, axis=None, keepdims=True)

2-norm:
np.sqrt(np.sum(x**2))
OR
np.linalg.norm(x, ord=None, axis=None, keepdims=True)



np.multiply(x1, x2)
np.dot(x1, x2)
c = a.dot(b)  # normal matrix multiplication - gives a [4,2]

np.int64(x > 0)

w.shape(x)
np.zeros((x, 1))

np.mean(x)
np.abs(x)


---------------------------------
Python module list : 
---------------------------------

Importing excel/csv: 
xlrd

pandas
import pandas
# load the dataset
dataset = pandas.read_csv('papers2.txt', delimiter = '\t')
dataset.head()


Importing text: open/readlines
Importing pdf: PyPDF2
Importing word: docx2txt

Linear algebra library: numpy

Plotting: matplotlib.pyplot

Reading/writing data from/to file: h5py


Image processing:
PIL
matplotlib.image


Machine learning and deep learning: 

sklearn
CountVectorizer (counts unique words), fit_transform (calculates mean and std), cosine_similarity (angle between vectors - )

pandas or simplier module 
separate individual words, count words, get most used and least used words 


Text processing:
gensim (did not work) - it summarizies text - does df matrix and finds keywords in text (words that are most used in text)

tokenizer in PyPI (deep vs shallow tokenization, "pip install tokenizer")

NLTK (natural language toolkit, "pip install nltk", i)


Web scraping libary: beautiful soup (pip install beautifulsoup4) - importing articles from Wikipedia


parce XML and HTML: pip install lxml


